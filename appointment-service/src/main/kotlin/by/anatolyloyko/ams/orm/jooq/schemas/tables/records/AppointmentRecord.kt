/*
 * This file is generated by jOOQ.
 */
package by.anatolyloyko.ams.orm.jooq.schemas.tables.records


import by.anatolyloyko.ams.orm.jooq.schemas.enums.AppointmentStatus
import by.anatolyloyko.ams.orm.jooq.schemas.tables.Appointment

import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AppointmentRecord private constructor() : UpdatableRecordImpl<AppointmentRecord>(Appointment.APPOINTMENT), Record8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var description: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var clientUserId: Long
        set(value): Unit = set(2, value)
        get(): Long = get(2) as Long

    open var masterUserId: Long
        set(value): Unit = set(3, value)
        get(): Long = get(3) as Long

    open var managerUserId: Long
        set(value): Unit = set(4, value)
        get(): Long = get(4) as Long

    open var studioId: Long
        set(value): Unit = set(5, value)
        get(): Long = get(5) as Long

    open var status: AppointmentStatus
        set(value): Unit = set(6, value)
        get(): AppointmentStatus = get(6) as AppointmentStatus

    open var comment: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?> = super.fieldsRow() as Row8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?>
    override fun valuesRow(): Row8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?> = super.valuesRow() as Row8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?>
    override fun field1(): Field<UUID?> = Appointment.APPOINTMENT.ID
    override fun field2(): Field<String?> = Appointment.APPOINTMENT.DESCRIPTION
    override fun field3(): Field<Long?> = Appointment.APPOINTMENT.CLIENT_USER_ID
    override fun field4(): Field<Long?> = Appointment.APPOINTMENT.MASTER_USER_ID
    override fun field5(): Field<Long?> = Appointment.APPOINTMENT.MANAGER_USER_ID
    override fun field6(): Field<Long?> = Appointment.APPOINTMENT.STUDIO_ID
    override fun field7(): Field<AppointmentStatus?> = Appointment.APPOINTMENT.STATUS
    override fun field8(): Field<String?> = Appointment.APPOINTMENT.COMMENT
    override fun component1(): UUID = id
    override fun component2(): String = description
    override fun component3(): Long = clientUserId
    override fun component4(): Long = masterUserId
    override fun component5(): Long = managerUserId
    override fun component6(): Long = studioId
    override fun component7(): AppointmentStatus = status
    override fun component8(): String? = comment
    override fun value1(): UUID = id
    override fun value2(): String = description
    override fun value3(): Long = clientUserId
    override fun value4(): Long = masterUserId
    override fun value5(): Long = managerUserId
    override fun value6(): Long = studioId
    override fun value7(): AppointmentStatus = status
    override fun value8(): String? = comment

    override fun value1(value: UUID?): AppointmentRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): AppointmentRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): AppointmentRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Long?): AppointmentRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Long?): AppointmentRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Long?): AppointmentRecord {
        set(5, value)
        return this
    }

    override fun value7(value: AppointmentStatus?): AppointmentRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): AppointmentRecord {
        set(7, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: Long?, value4: Long?, value5: Long?, value6: Long?, value7: AppointmentStatus?, value8: String?): AppointmentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AppointmentRecord
     */
    constructor(id: UUID, description: String, clientUserId: Long, masterUserId: Long, managerUserId: Long, studioId: Long, status: AppointmentStatus, comment: String? = null): this() {
        this.id = id
        this.description = description
        this.clientUserId = clientUserId
        this.masterUserId = masterUserId
        this.managerUserId = managerUserId
        this.studioId = studioId
        this.status = status
        this.comment = comment
        resetChangedOnNotNull()
    }
}
