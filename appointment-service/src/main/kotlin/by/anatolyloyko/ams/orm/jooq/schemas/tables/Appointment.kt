/*
 * This file is generated by jOOQ.
 */
package by.anatolyloyko.ams.orm.jooq.schemas.tables


import by.anatolyloyko.ams.orm.jooq.schemas.Appointments
import by.anatolyloyko.ams.orm.jooq.schemas.enums.AppointmentStatus
import by.anatolyloyko.ams.orm.jooq.schemas.tables.records.AppointmentRecord

import java.util.UUID
import java.util.function.Function

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Appointment(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, AppointmentRecord>?,
    parentPath: InverseForeignKey<out Record, AppointmentRecord>?,
    aliased: Table<AppointmentRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<AppointmentRecord>(
    alias,
    Appointments.APPOINTMENTS,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>appointments.appointment</code>
         */
        val APPOINTMENT: Appointment = Appointment()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AppointmentRecord> = AppointmentRecord::class.java

    /**
     * The column <code>appointments.appointment.id</code>.
     */
    val ID: TableField<AppointmentRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>appointments.appointment.description</code>.
     */
    val DESCRIPTION: TableField<AppointmentRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>appointments.appointment.client_user_id</code>.
     */
    val CLIENT_USER_ID: TableField<AppointmentRecord, Long?> = createField(DSL.name("client_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>appointments.appointment.master_user_id</code>.
     */
    val MASTER_USER_ID: TableField<AppointmentRecord, Long?> = createField(DSL.name("master_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>appointments.appointment.manager_user_id</code>.
     */
    val MANAGER_USER_ID: TableField<AppointmentRecord, Long?> = createField(DSL.name("manager_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>appointments.appointment.studio_id</code>.
     */
    val STUDIO_ID: TableField<AppointmentRecord, Long?> = createField(DSL.name("studio_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>appointments.appointment.status</code>.
     */
    val STATUS: TableField<AppointmentRecord, AppointmentStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(AppointmentStatus::class.java), this, "")

    /**
     * The column <code>appointments.appointment.comment</code>.
     */
    val COMMENT: TableField<AppointmentRecord, String?> = createField(DSL.name("comment"), SQLDataType.VARCHAR(255), this, "")

    private constructor(alias: Name, aliased: Table<AppointmentRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<AppointmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>appointments.appointment</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>appointments.appointment</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>appointments.appointment</code> table reference
     */
    constructor(): this(DSL.name("appointment"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Appointments.APPOINTMENTS
    override fun getPrimaryKey(): UniqueKey<AppointmentRecord> = Internal.createUniqueKey(Appointment.APPOINTMENT, DSL.name("appointment_pkey"), arrayOf(Appointment.APPOINTMENT.ID), true)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?> = super.fieldsRow() as Row8<UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, Long?, Long?, Long?, Long?, AppointmentStatus?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
