/*
 * This file is generated by jOOQ.
 */
package by.anatolyloyko.ams.orm.jooq.schemas.tables


import by.anatolyloyko.ams.orm.jooq.schemas.Administration
import by.anatolyloyko.ams.orm.jooq.schemas.tables.records.BrandStudiosRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BrandStudios(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BrandStudiosRecord>?,
    parentPath: InverseForeignKey<out Record, BrandStudiosRecord>?,
    aliased: Table<BrandStudiosRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BrandStudiosRecord>(
    alias,
    Administration.ADMINISTRATION,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>administration.brand_studios</code>
         */
        val BRAND_STUDIOS: BrandStudios = BrandStudios()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BrandStudiosRecord> = BrandStudiosRecord::class.java

    /**
     * The column <code>administration.brand_studios.brand_id</code>.
     */
    val BRAND_ID: TableField<BrandStudiosRecord, Long?> = createField(DSL.name("brand_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>administration.brand_studios.studio_id</code>.
     */
    val STUDIO_ID: TableField<BrandStudiosRecord, Long?> = createField(DSL.name("studio_id"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<BrandStudiosRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BrandStudiosRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>administration.brand_studios</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>administration.brand_studios</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>administration.brand_studios</code> table reference
     */
    constructor(): this(DSL.name("brand_studios"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Administration.ADMINISTRATION
    override fun getUniqueKeys(): List<UniqueKey<BrandStudiosRecord>> = listOf(
        Internal.createUniqueKey(BrandStudios.BRAND_STUDIOS, DSL.name("brand_studios_studio_id_key"), arrayOf(BrandStudios.BRAND_STUDIOS.STUDIO_ID), true)
    )

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
