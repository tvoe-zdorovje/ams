/*
 * This file is generated by jOOQ.
 */
package by.anatolyloyko.ams.orm.jooq.schemas.tables.records


import by.anatolyloyko.ams.orm.jooq.schemas.tables.Studio

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StudioRecord private constructor() : UpdatableRecordImpl<StudioRecord>(Studio.STUDIO), Record1<Long?> {

    open var id: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row1<Long?> = super.fieldsRow() as Row1<Long?>
    override fun valuesRow(): Row1<Long?> = super.valuesRow() as Row1<Long?>
    override fun field1(): Field<Long?> = Studio.STUDIO.ID
    override fun component1(): Long = id
    override fun value1(): Long = id

    override fun value1(value: Long?): StudioRecord {
        set(0, value)
        return this
    }

    override fun values(value1: Long?): StudioRecord {
        this.value1(value1)
        return this
    }

    /**
     * Create a detached, initialised StudioRecord
     */
    constructor(id: Long): this() {
        this.id = id
        resetChangedOnNotNull()
    }
}
