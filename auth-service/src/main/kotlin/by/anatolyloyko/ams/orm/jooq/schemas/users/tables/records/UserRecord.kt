/*
 * This file is generated by jOOQ.
 */
package by.anatolyloyko.ams.orm.jooq.schemas.users.tables.records


import by.anatolyloyko.ams.orm.jooq.schemas.users.tables.User

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord private constructor() : UpdatableRecordImpl<UserRecord>(User.USER), Record4<Long?, String?, String?, String?> {

    open var id: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    open var firstName: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var lastName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var phoneNumber: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, String?, String?, String?> = super.fieldsRow() as Row4<Long?, String?, String?, String?>
    override fun valuesRow(): Row4<Long?, String?, String?, String?> = super.valuesRow() as Row4<Long?, String?, String?, String?>
    override fun field1(): Field<Long?> = User.USER.ID
    override fun field2(): Field<String?> = User.USER.FIRST_NAME
    override fun field3(): Field<String?> = User.USER.LAST_NAME
    override fun field4(): Field<String?> = User.USER.PHONE_NUMBER
    override fun component1(): Long = id
    override fun component2(): String = firstName
    override fun component3(): String = lastName
    override fun component4(): String = phoneNumber
    override fun value1(): Long = id
    override fun value2(): String = firstName
    override fun value3(): String = lastName
    override fun value4(): String = phoneNumber

    override fun value1(value: Long?): UserRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): UserRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: String?): UserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(id: Long, firstName: String, lastName: String, phoneNumber: String): this() {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
        this.phoneNumber = phoneNumber
        resetChangedOnNotNull()
    }
}
