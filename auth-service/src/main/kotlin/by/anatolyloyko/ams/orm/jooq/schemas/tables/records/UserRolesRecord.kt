/*
 * This file is generated by jOOQ.
 */
package by.anatolyloyko.ams.orm.jooq.schemas.tables.records


import by.anatolyloyko.ams.orm.jooq.schemas.tables.UserRoles

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRolesRecord private constructor() : TableRecordImpl<UserRolesRecord>(UserRoles.USER_ROLES), Record2<Long?, Long?> {

    open var userId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var roleId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>
    override fun valuesRow(): Row2<Long?, Long?> = super.valuesRow() as Row2<Long?, Long?>
    override fun field1(): Field<Long?> = UserRoles.USER_ROLES.USER_ID
    override fun field2(): Field<Long?> = UserRoles.USER_ROLES.ROLE_ID
    override fun component1(): Long? = userId
    override fun component2(): Long? = roleId
    override fun value1(): Long? = userId
    override fun value2(): Long? = roleId

    override fun value1(value: Long?): UserRolesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Long?): UserRolesRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Long?, value2: Long?): UserRolesRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised UserRolesRecord
     */
    constructor(userId: Long? = null, roleId: Long? = null): this() {
        this.userId = userId
        this.roleId = roleId
        resetChangedOnNotNull()
    }
}
